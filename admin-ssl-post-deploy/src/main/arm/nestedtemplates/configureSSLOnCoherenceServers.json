{
   "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {
      "_artifactsLocation": {
         "type": "string",
         "metadata": {
            "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
         },
         "defaultValue": "${artifactsLocationBase}/arm-oraclelinux-wls-cluster/${git.tag}/admin-ssl-post-deploy/src/main/"
      },
      "_artifactsLocationSasToken": {
         "type": "securestring",
         "metadata": {
            "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
         },
         "defaultValue": ""
      },
      "adminVMName": {
         "type": "string",
         "defaultValue": "adminVM",
         "metadata": {
            "description": "Admin Server hosting VM name."
         }
      },
      "location": {
         "type": "string",
         "defaultValue": "[resourceGroup().location]",
         "metadata": {
            "description": "Location for all resources."
         }
      },
      "wlsDomainName": {
         "type": "string",
         "defaultValue": "wlsd",
         "metadata": {
            "description": "Provide existing running Weblogic domain name"
         }
      },
      "wlsUserName": {
         "type": "string",
         "metadata": {
            "description": "Username for your Weblogic domain name"
         }
      },
      "wlsPassword": {
         "type": "securestring",
         "metadata": {
            "description": "Password for your Weblogic domain name"
         }
      },
      "managedServerPrefix": {
         "type": "string",
         "defaultValue": "msp",
         "metadata": {
            "description": "Provide managed server prefix"
         }
      },
      "dynamicClusterSize": {
			"type": "int",
			"metadata": {
				"description": "Initial Number of Managed Servers that has been configured in the Dynamic Cluster"
			}
	  },
      "maxDynamicClusterSize":{
			"type": "int",
			"metadata": {
				"description": "Maximum Number of Managed Servers allowed to be configured in the Dynamic Cluster"
			}
	  },
      "coherenceCacheSettings": {
         "type": "object",
         "defaultValue": {
            "enable": false,
            "numberOfCoherenceCacheInstances": 0
         },
         "metadata": {
            "description": "If enable is true, must specify the numberOfCoherenceCacheInstances"
         }
      },
      "customSSLSettings": {
         "type": "secureObject",
         "defaultValue": {
            "enable": false,
            "customIdentityKeyStoreBase64String": "",
            "customIdentityKeyStorePassPhrase": "",
            "customIdentityKeyStoreType": "",
            "customTrustKeyStoreBase64String": "",
            "customTrustKeyStorePassPhrase": "",
            "customTrustKeyStoreType": "",
            "privateKeyAlias":"",
            "privateKeyPassPhrase":""
         },
         "metadata": {
            "description": "If enable is true, must specify all customSSLSettings. customIdentityKeyStoreBase64String and customTrustKeyStoreBase64String are the custom identity and trust keystore data repectively, i.e., contents of identity.jks, trust.jks keystore files in base64 encoding. Similarly, all other custom ssl settings are also required to configure SSL settings"
         }
      },
      "deploy_timestamp": {
          "type": "string",
          "defaultValue": "[utcNow('yyMMddHHmm')]",
          "metadata": {
              "description": "Timestamp required for uniquely identifying and executing custom extension script multiple times"
         }
      }
   },
   "variables": {
      "const_hyphen": "-",
      "const_wlsHome": "/u01/app/wls/install/oracle/middleware/oracle_home",
      "const_wlsDomainPath": "/u01/domains",
      "const_coherenceVMPrefix": "[concat(parameters('managedServerPrefix'),'StorageVM')]",
      "const_coherenceServerPrefix": "[concat(parameters('managedServerPrefix'),'Storage')]",
      "name_coherenceServerConfigScriptFile": "configureSSLOnCoherenceServers.sh"
   },
   "resources": [
        {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2020-06-01",
          "name": "post.deploy.ssl.config.coherence.template.start",
          "properties": {
             "mode": "Incremental",
             "template": {
                "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "resources": []
              }
           }
        },
        {
         "type": "Microsoft.Compute/virtualMachines/extensions",
         "name": "[concat(variables('const_coherenceVMPrefix'), copyIndex(1),'/newuserscript')]",
         "condition": "[parameters('customSSLSettings').enable]",
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'post.deploy.ssl.config.coherence.template.start')]"
         ],
         "apiVersion": "2020-06-01",
         "location": "[parameters('location')]",
         "copy": {
                "name": "coherenceVMExtensionLoop",
                "count": "[parameters('coherenceCacheSettings').numberOfCoherenceCacheInstances]"
         },
         "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.1",
            "autoUpgradeMinorVersion": true,
            "settings": {
               "timestamp": "[int(parameters('deploy_timestamp'))]",
               "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('name_coherenceServerConfigScriptFile'), parameters('_artifactsLocationSasToken')))]"
               ]
            },
            "protectedSettings": {
                "commandToExecute": "[concat('sh',' ',variables('name_coherenceServerConfigScriptFile'),' ',parameters('adminVMName'),' ',parameters('wlsDomainName'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',variables('const_wlsHome'),' ',variables('const_wlsDomainPath'),' ',variables('const_coherenceVMPrefix'),copyIndex(1),' ',variables('const_coherenceServerPrefix'),' ',parameters('coherenceCacheSettings').enable,' ',if(parameters('coherenceCacheSettings').enable,parameters('coherenceCacheSettings').numberOfCoherenceCacheInstances,0),' ', copyIndex(1),' ',parameters('customSSLSettings').enable,' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').customIdentityKeyStoreBase64String, 'null'),' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').customIdentityKeyStorePassPhrase, 'null'),' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').customIdentityKeyStoreType, 'null'),' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').customTrustKeyStoreBase64String, 'null'),' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').customTrustKeyStorePassPhrase, 'null'),' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').customTrustKeyStoreType, 'null'),' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').privateKeyAlias, 'null'),' ',if(parameters('customSSLSettings').enable,parameters('customSSLSettings').privateKeyPassPhrase, 'null'))]"            }
            }
        },
        {
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2020-06-01",
          "name": "post.deploy.ssl.config.coherence.template.end",
          "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'post.deploy.ssl.config.coherence.template.start')]",
            "coherenceVMExtensionLoop"
          ],
          "properties": {
             "mode": "Incremental",
             "template": {
                "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "resources": []
              }
           }
        }
   ],
   "outputs": {
      "wlsDomainLocation": {
         "type": "string",
         "value": "[concat('/u01/domains/', parameters('wlsDomainName'))]"
      }
   }
}
